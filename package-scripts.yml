scripts:
  build:
    default: nps build.prepare && concurrently 'nps build.config' 'nps build.code' 'nps build.assets'
    prepare:
      default: concurrently 'nps build.prepare.mkdir' 'nps build.prepare.relink'
      mkdir: mkdirp 'build/dev' 'build/dev/zenplayer'
      relink: rimraf 'public' && ln -s 'build/dev' 'public'
    config:
      default: concurrently 'nps build.config.config' 'nps build.config.htaccess'
      config: cp -R 'web/config/' 'build/dev'
      htaccess: cat 'web/.htaccess' 'node_modules/apache-server-configs/dist/.htaccess' >'build/dev/.htaccess'
    code:
      default: concurrently 'nps build.code.html' 'nps build.code.css' 'nps build.code.js'
      html:
        default: concurrently 'nps build.code.html.index' 'nps build.code.html.error' 'nps build.code.html.zenplayer'
        index: jinja2 'web/markup/index.html.j2' >'build/dev/index.html'
        error: jinja2 'web/markup/404.html.j2' >'build/dev/404.html'
        zenplayer: jinja2 'web/markup/zenplayer.html.j2' >'build/dev/zenplayer/index.html'
      css:
        default: nps build.code.css.scss build.code.css.prefix
        scss: node-sass 'web/style' --include-path 'node_modules' --linefeed lf --output-style expanded --output 'build/dev'
        prefix: postcss 'build/dev/style.css' --use autoprefixer --no-map --replace
      js:
        default: nps build.code.js.typescript build.code.js.babel build.code.js.browserify
        typescript: tsc
        babel: babel 'build/tmp/js/1' --out-dir 'build/tmp/js/2'
        browserify: browserify 'build/tmp/js/2/app.js' --debug | exorcist 'build/dev/bundle.js.map' >'build/dev/bundle.js'
    assets:
      default: concurrently 'nps build.assets.images' 'nps build.assets.favicon'
      images:
        default: concurrently 'nps build.assets.images.copy' 'nps build.assets.images.png'
        copy: cp -R 'web/images/' 'build/dev/images'
        png: find 'web/images' -type f -name '*.svg' -print0 | xargs -0 -I % sh -c 'convert -resize 256x256 -density 1000 -background none "%" "build/dev/images/$(basename "%" .svg).png"'
      favicon:
        default: concurrently 'nps build.assets.favicon.copy' 'nps build.assets.favicon.png' 'nps build.assets.favicon.ico'
        copy: cp -R 'web/favicon/' 'build/dev'
        png: convert -resize 64x64 -density 1000 -background none 'web/favicon/favicon.svg' 'build/dev/favicon.png'
        ico: convert -define icon:auto-resize=32,16 -background none -colors 256 -density 1000 'web/favicon/favicon.svg' 'build/dev/favicon.ico'

  watch:
    default: nps build.prepare && concurrently 'nps watch.config' 'nps watch.code' 'nps watch.assets'
    config:
      default: concurrently 'nps watch.config.config' 'nps watch.config.htaccess'
      config: onchange 'web/config/*' -- nps build.config.config
      htaccess: onchange 'web/.htaccess' -- nps build.config.htaccess
    code:
      default: concurrently 'nps watch.code.markup' 'nps watch.code.style' 'nps watch.code.script'
      markup: onchange 'web/markup/*' 'web/data/*' -- nps build.code.markup
      style: onchange 'web/style/*' -- nps build.code.style
      script: onchange 'web/script/*' -- nps build.code.script
    assets:
      default: concurrently 'nps watch.assets.images' 'nps watch.assets.favicon'
      images: onchange 'web/images/*' -- nps build.assets.images
      favicon: onchange 'web/favicon/*' -- nps build.assets.favicon

  dist:
    default: nps build dist.relink dist.copy
    relink: rimraf 'public' && ln -s 'build/release' 'public'
    copy: cp -R 'build/dev/' 'build/dist'
