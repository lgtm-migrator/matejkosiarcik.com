#!/bin/sh
#
# This file is part of personal-website which is released under MIT license.
# See file LICENSE.txt or go to https://github.com/matejkosiarcik/personal-website for full license details.
#

# setup
set -euf
cd "$(dirname "${0}")/.."
. "./utils/internal/helpers.sh"

# All text files
text_files | while IFS= read -r file; do
    # check for indentation tabs
    if [ "${file}" = "Makefile" ]; then continue; fi
    grep -E "^(\s*)	(\s*)" --line-number <"${file}" \
        | sed -E "s~^([0-9]+):(.*)\$~${file}:\1: warning: indentation using <tab> found (tab_indent)~"
done

# Html
if check htmlhint; then
    htmlhint --format unix "." | grep -v "^\$" | grep -Ev "^(.*)([0-9]+) problem(s?)(.*)\$" \
        | sed -E "s~\[error/(.*)\]\$~[\1]~" | sed -E "s~(.*):([0-9]+):([0-9]+): ~\1:\2:\3: warning: ~" \
        | sed -E "s~\[(.*)\] \[(.*)\]~'\1' [\2]~"
fi

# Sass
if check sass-lint; then
    sass-lint --verbose --no-exit --syntax scss --format unix | grep -Ev "([0-9]+) problems" | grep -v "^\$" \
        | sed -E "s~(w|W)arning/~~" | sed -E "s~(e|E)rror/~~" | sed -E "s~^(.*):([0-9]+):([0-9]+):~\1:\2:\3: warning:~"
fi

# TypeScript
if check tslint; then
    # shellcheck disable=SC2046
    tslint --force --format "verbose" $(find "." -type f -name "*.ts" -or -name "*.js" | tr "\n" " ") | grep -v '^$' \
        | sed "s~^ERROR: ~~" | sed 's~.$~~' | sed -E 's~^\((.+)\) (.*)$~\2 (\1)~' \
        | sed -E "s~(.*)\[([0-9]+), ([0-9]+)\]~\1:\2:\3: warning~"
fi

# Markdown
if check mdl; then
    mdl "." --git-recurse || true
fi

# Yaml
if check yamllint; then
    yamllint "." --format parsable --config-file ".yamllint.yml" | sed "s~^./~~"
fi

# JSON
if check jsonlint; then
    files_ending ".json" | while IFS= read -r file; do
        jsonlint "${file}" --quiet --compact 2>&1 | sed -E "s~\.\$~~" \
            | sed -E "s~(.*): line ([0-9]+), col ([0-9]+), ~\1:\2:\3: warning: ~" | sed "s~', '~' or '~g"
    done
fi

# Python
if check pylint; then
    files_ending ".py" | while IFS= read -r file; do
        pylint --output-format parseable "${file}" | grep -Ev "^([- ]+)\$" | grep -Ev "^\$" \
            | grep -Ev "^([\*]+) Module" | grep -v "^Your code has been rated at " \
            | sed -E "s~(.*)\[(.*)\](.*)~\1\3 [\2]~" | sed -E "s~(.*):([0-9]+): ~\1:\2: warning:~" \
            | sed -E "s~, \]\$~]~"
    done
fi
if check flake8; then
    flake8 "." | sed -E "s~(.*):([0-9]+):([0-9]+): ([^ ]+) (.*)~\1:\2:\3: \5 [\4]~" \
        | sed -E "s~(.*):([0-9]+):([0-9]+): ~\1:\2:\3: warning: ~" | sed "s~^./~~"
fi
if check pep8; then
    pep8 "."
fi

# Shell
if check shellcheck; then
    shell_files | while IFS= read -r file; do
        shellcheck --external-sources "./utils/internal/helpers.sh" --format gcc "${file}" | sed "s~^./~~"
    done
fi
if check shfmt; then
    shell_files | while IFS= read -r file; do
        shfmt -i 4 -p -l "${file}" \
            | sed -E "s~(.*)~\1: warning: file badly formatted, run 'format' script to resolve (bad_format)~" \
            | sed "s~^./~~"
    done
fi
# Invoke various shells with scripts for alternative linting via dry runs
if check sh; then
    shell_files | while IFS= read -r file; do
        sh -n "${file}" | sed "s~^./~~"
    done
fi
if check bash; then
    shell_files | while IFS= read -r file; do
        bash -n "${file}" | sed "s~^./~~"
        bash --posix -o pipefail -n "${file}" | sed "s~^./~~"
        bash -o posix -o pipefail -n "${file}" | sed "s~^./~~"
    done
fi
if check dash; then
    shell_files | while IFS= read -r file; do
        dash -n "${file}" | sed "s~^./~~"
    done
fi
if check ksh; then
    shell_files | while IFS= read -r file; do
        ksh -n "${file}" | sed "s~^./~~"
    done
fi
if check mksh; then
    shell_files | while IFS= read -r file; do
        mksh -n "${file}" | sed "s~^./~~"
    done
fi
if check zsh; then
    shell_files | while IFS= read -r file; do
        zsh -n "${file}" | sed "s~^./~~"
    done
fi
if check yash; then
    shell_files | while IFS= read -r file; do
        yash -n "${file}" | sed "s~^./~~"
        yash --posix -n "${file}" | sed "s~^./~~"
        yash -o posixly-correct -n "${file}" | sed "s~^./~~"
    done
fi

# SVG
if check xmllint; then
    files_ending ".svg" | while IFS= read -r file; do
        xmllint "${file}" --noout || true
    done
fi
# generated PDFs should be the same for both methods (svg2pdf and rsvg-convert)
# if they differ, there is possibly some glitch in source SVGs
if check svg2pdf && check rsvg-convert; then
    temp="$(mktemp -d)"
    trap 'rm -rf "${temp}"' EXIT
    files_ending ".svg" | while IFS= read -r file; do
        target="${temp}/$(basename "${file}" ".svg").pdf"
        svg2pdf "${file}" "${target}.1"
        rsvg-convert "${file}" -f pdf -o "${target}.2"
        cmp --silent "${target}.1" "${target}.2" || { printf "%s\n" "${file}: warning: Generated PDFs differ (unstable_svg)"; }
    done
    rm -rf "${temp}"
    trap - EXIT
fi
