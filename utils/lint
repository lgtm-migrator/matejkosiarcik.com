#!/bin/sh
#
# This file is part of personal-website which is released under MIT license.
# See file LICENSE.txt or go to https://github.com/matejkosiarcik/personal-website for full license details.
#

# setup
set -euf
cd "$(dirname "${0}")/.."
. "./utils/helpers.sh"

# General text files
text_files | while IFS= read -r file; do
    # check for leading tabs
    (grep -E "^	" --line-number <"${file}" || true) \
        | sed -E "s~^([0-9]+):(.*)\$~${file}:\1: warning: leading <tab> found for line: '\2' (tab_indent)~"
done

# Markdown
if check mdl; then
    mdl "." --git-recurse || true
fi

# Yaml
if check yamllint; then
    yamllint "." --format parsable --config-file ".yamllint.yml" || true
fi

# Python
if check pylint; then
    python_files | while IFS= read -r file; do
        pylint --rcfile ".pylintrc" "${file}" | grep -E "^[W|C]" || true
    done
fi
if check flake8; then
    flake8 "."
fi
if check pep8; then
    pep8 "."
fi

# JSON
if check jsonlint; then
    json_files | while IFS= read -r file; do
        jsonlint "${file}" --quiet
    done
fi

# Shell
if check shellcheck; then
    shell_files | while IFS= read -r file; do
        shellcheck --external-sources "./utils/helpers.sh" --format gcc "${file}" || true
    done
fi
if check shfmt; then
    shell_files | while IFS= read -r file; do
        shfmt -i 4 -p -l "${file}" \
            | sed -E "s~(.*)~\1: warning: file badly formatted, run 'format' script to resolve (bad_format)~"
    done
fi
# Invoke various shells with scripts for alternative linting via dry runs
if check sh; then
    shell_files | while IFS= read -r file; do
        sh -n "${file}" || true
    done
fi
if check bash; then
    shell_files | while IFS= read -r file; do
        bash -n "${file}" || true
        bash --posix -o pipefail -n "${file}" || true
        bash -o posix -o pipefail -n "${file}" || true
    done
fi
if check dash; then
    shell_files | while IFS= read -r file; do
        dash -n "${file}" || true
    done
fi
if check ksh; then
    shell_files | while IFS= read -r file; do
        ksh -n "${file}" || true
    done
fi
if check mksh; then
    shell_files | while IFS= read -r file; do
        mksh -n "${file}" || true
    done
fi
if check zsh; then
    shell_files | while IFS= read -r file; do
        zsh -n "${file}" || true
    done
fi
if check yash; then
    shell_files | while IFS= read -r file; do
        yash -n "${file}" || true
        yash --posix -n "${file}" || true
        yash -o posixly-correct -n "${file}" || true
    done
fi
